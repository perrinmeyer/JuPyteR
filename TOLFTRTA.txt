The One Linear Filter to Rule them ALL  (TOLFTRTA, pronounced " 'Toll' + 'Frittata'")

The engineering subdisicpline of Digital Signal Processing (DSP) is a
mature field since it started at the dawn of digital
computers. Subsiquently, it has a mature ecosystem of canonical
textbooks, undergraduate curriculum, computer algorithms, etc,
complete with vanity names for everything, from Kaiser Windows to
Nyquist.  While inevitable, this maturity often tends to make DSP seem
more complicated and "magical" then perhaps necessary.  Many of the
debates of the early days of DSP are no longer relavent.  For example,
there are hundreds of chapters of textbooks comparing the relative
merrets of Finite Impulse Response Filters (FIR) versus Infinite
Impulse Response filters (IIR).  There are chapters of filter design
methods, again split into FIR methods and IIR methods.  Are two 2nd
order Biquads in series better or worse than an equripple elliptic
filter?

As a mathematican, one dimentional Linear Time Invariant filtering is
almost comicaly simple in the abstract.

Define x[n] as the input signal, sampled at sample rate R.  For Audio,
thats usually 48,000 samples per second, which because of the
excellent work of Nyquist et al, completely and accuratley represents
and audio signal with a bandwidth of zero to 24kHz (thousand Hertz, or
cycles per second).

And any LTI filter can be completely characterized by either its
Impulse Response (IR) h[t], or its frequency response H[f]. Either can
be transformed into the other by the Fourier Transform.

The output y[n] is then simply the convolution of the input signal
x[n] and the impulse response h[t]

[[ insert convolution equation ]] 

This is textbook stuff.  Why repeat it?  Well, there is a very famous
algorithm called the FFT (Fast Fourier Transform), which effiecietly
computes the Fourier Transform.  It is arguably the most important
algorithm in appled mathematics, and high quality and robust FFT
algorithms and computer code are available for all computer platforms,
speciality DSP chips, Graphical Processing Units (GPU's).

Because we are in the linear world, it is possible to transform the convolution filter equation into the Fourier (frequency) domain. 

lets define  X[f] = FFT(x[n]), and H[f] = FFT(h[n]), and Y[f] = FFT(y[y])

The convoultion equation is then

Y[f] = H[f] * X[f]

which is great since now we just have a (possibly complex)
multiplication, which is computationaly effiecient and obviously
simple to describe and analyze.

Why is this so cool? We need one more ingredient.  Overlap Save Block
Convolution. As written, the convolution equations do not really work
in a real-time DSP context.  As written, you need all input x before
you can calculate the output y.  For "offline" processing (think
re-mastering an audio tape, etc) it would be fine.  But most DSP
algorithms are for "real time" applications (music, video,
etc). Overlap Save Block convolution bbreaks the convolution equation
into "blocks" (or "chunks"), and opperates on these "chunks", and
after every "chunk" outputs a "chunk" of output (y[t]) values.  This
allows the convolution equation to be used for real-time DSP
filtering.

Thus, FFT based Overlap Save block convolution can be used for ANY linear filtering application. 

This statement often surprises DSP engineers.  They say "ha!, what about IIR filters -- the impulse response is, wait for it
INFINITE, and thus the block convoltuion algorithms dont work."  Then they sit back and smile.  But not for long.  

I say, ok. fine.  not all IIR filters can be calculated with block convolution in real time.  you got me.  I say that to build
up their confidence for what comes next.

For most real-world applications, we are only really interested in Stable and Causual IIR filters.  Unstable IIR filters have an infinite
output for some input.  What does that mean?  Well, guitar feedback is an example of an unstable LTI system. But (thanfully!) most guitar
amps cannot produce infinite sound.  At some point they get truncated (or kicked over...). 

So, if we restrict ourselves to Stable and Causual linear filters (IIR and FIR), we get a nice property.  ALL Stable and Causual LTI linear filters have an impulse response that decays to zero.  The DSP engineer gets one last gasp of hope. See, it might not decay fast enough!

And this is why block convolution has been overlooked as an algorithm to implement real-time IIR filters in the real world  A 2nd order linear filter (lets take the common "biquad" filter as an example) has a simple recursive structure that maybe takes fifty mathematical operations or
10 lines of computer code to implement.  This is efficient.  Lets say this particular (low frequency) biquad has an impulse response that slowely decays to zero.  But because all computer calcualtions have a finite precision, all we need to do is to "wait" for the impulse response to decay below a certain threshhold (for single precisio floating points its 1e-7, etc). The impulse response might be 10,000 "taps" long. 

So, in order implement this IIR filter using FFT based Overlap Save Block Convolution, the algorithm would go something like this. 

Take 256 samples of x[n].
Zero Pad to length 16,384
Do length 2^14 FFT(x)
Do length 2^4 FFT(h)
multiply Y[f] = X[f] * H[f]
Do length 2^14  y[t] = IFFT(Y[f])

The DSP engineer then calls mathematicians insane.  From the Direct Form II implementation in 100 lines of C code, we have created an
algorithm that computes a sixteen thousand point FFT and IFFT every 256 samples.  All for a simple 2nd order biquad. 

BUT, computers are now VERY,VERY fast.  and GPU's are EVEN FASTER.  Our desktop computers can easily do the FFT based overlap save block
convolution described above, while STILL playing angry birds and running a fancy screen saver. 

So now the DSP engineer has to admit that this one algorithm can calculate all linear filters. (Finite Impulse Response Filters, have, wait for it, a finite lenght, and so its obvious even to DSP engineers that overlap save block convolution can perform real time FIR filtering with no conceptual issues).  How about Convolution Reverb? Oh, its the same algorithm.  No new code needed.  "Spectral filtering" -- sure, just change H[f] every chunck size. Done.  

So, in the 21st century, why not use this algorithm for all linear filtering, despite it being "less effiecient" than the hundreds of named algorithms in the cannonical DSP textbooks. 

Well, there are good reasons.  Since now we are free of the baggage of the cannonical DSP textbooks.  We can implement any filter we want (as long as it is causual and stable, a very mild restriction).  We can literely "Draw" the frequency response of a filter we want, take the IFFT to find h[t], and bang - use it! (ok, its not quite that simple, but conceptually its that simple). 

This brings us to wavefield synthesis.  Wavefield synthesis utilizes hundreds (or thousands) of descrite transducers to create arbitrary 
sound fields.  Conceptually we manipulate the magnitude and phase (at every frequency) at every transducer to make cool sound environments. Linear filtering on steroids. Classical textbooks are now useless.  

Now we a way of intelligently using the massive processing power of GPU's.  Use the hand-tuned FFT routines from NVIDIA or AMD to turn a GPU into a parallel array of FFT based block convolution filters.  Sample synchronicity is easy since we can zero pad all the h[t]'s to the same length. Ther are no corner cases.  No code branches.  No FIR version or IIR version.  One (simple) algorithm. The same algorithm running on all cores. 

With LTI "solved", we can now completly focus our attention on the fascinating mathematics of wavefield synthesis, and never, ever, open a
copy of Oppenhiem and Shaefer again.  
